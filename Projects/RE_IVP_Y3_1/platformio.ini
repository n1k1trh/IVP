#include <Arduino.h>
#include <Wire.h>
#include <RTClib.h>
#include <LowPower.h>
#include <iostream>
#include <algorithm>
#include <cmath>
#include <crandom>
#include <vector>
#include <lis
#define int long long
#define pb push_back
#define FOR(i,a,b) for(int i=(a); i<=(b); i++)
using namespace std;

const int NUM_COMPARTMENTS = 4;
const int leds[NUM_COMPARTMENTS] = {2, 3, 4, 5}; // LED pins
const int buzzerPin = 6;

RTC_DS3231 rtc;

struct Interval {
  DateTime start, end;
  int weight;
  int cid; // compartment id
  bool operator<(const Interval &o) const {
    return end.unixtime() < o.end.unixtime();
  }
};

// bsta, lmao why it doesnt turn green haha
int findPrev(const std::vector<Interval>& iv, int i) {
  int lo = 0, hi = i-1, ans = -1;
  while (lo <= hi) {
    int mid = (lo+hi)/2;
    if (iv[mid].end.unixtime() <= iv[i].start.unixtime()) {
      ans = mid;
      lo = mid+1;
    } else hi = mid-1;
  }
  return ans;
}


vector<Interval> schedulePills(vector<Interval> iv) {
  sort(iv.begin(), iv.end());
  int n = iv.size();
  vector<int> dp(n), choice(n);
  vector<int> P(n);

  FOR(i,0,n-1) P[i] = findPrev(iv, i);

  dp[0] = iv[0].weight;
  choice[0] = 1;

  FOR(i,1,n-1) {
    int incl = iv[i].weight + (P[i] != -1 ? dp[P[i]] : 0);
    int excl = dp[i-1];
    if (incl > excl) {
      dp[i] = incl;
      choice[i] = 1;
    } else {
      dp[i] = excl;
      choice[i] = 0;
    }
  }

  vector<Interval> result;
  int i = n-1;
  while (i >= 0) {
    if (choice[i]) {
      result.pb(iv[i]);
      i = P[i];
    } else {
      i--;
    }
  }
  reverse(result.begin(), result.end());
  return result;
}

void activateCompartment(int cid, bool correct) {
  // turn all LEDs red
  FOR(i,0,NUM_COMPARTMENTS-1) digitalWrite(leds[i], LOW);

  // turn correct one green
  digitalWrite(leds[cid], HIGH);

  // sound buzzer
  tone(buzzerPin, correct ? 1000 : 200);
  delay(200);
  noTone(buzzerPin);
}

void setup() {
  Serial.begin(9600);
  rtc.begin();

  FOR(i,0,NUM_COMPARTMENTS-1) pinMode(leds[i], OUTPUT);
  pinMode(buzzerPin, OUTPUT);

  // Example pill intervals (in real use, load from EEPROM or serial)
  std::vector<Interval> intervals = {
    { rtc.now() + TimeSpan(10), rtc.now() + TimeSpan(3600), 5, 0 }, // after 10s
    { rtc.now() + TimeSpan(20), rtc.now() + TimeSpan(7200), 3, 1 }, // after 20s
    { rtc.now() + TimeSpan(15), rtc.now() + TimeSpan(5400), 7, 2 }, // overlaps
  };

  auto chosen = schedulePills(intervals);

  Serial.println("Scheduled compartments:");
  for (auto &iv : chosen) {
    Serial.print("Compartment ");
    Serial.print(iv.cid);
    Serial.print(" from ");
    Serial.print(iv.start.timestamp());
    Serial.print(" to ");
    Serial.println(iv.end.timestamp());
  }
  return 0;
}

void loop() {
  DateTime now = rtc.now();

  // Example: poll every second (can be reduced further w/ interrupts)
  delay(1000);
}

